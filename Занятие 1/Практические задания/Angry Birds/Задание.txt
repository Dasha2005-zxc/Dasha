использование СистемаСистема;
используя SystemSystem.Collections.Generic;
используя систему.Linq;
использование Avalonia;
пространство имен Digger.Архитектура;
открытый класс GameState
{
	public const int ElementSize = 32;
	public Список<Анимация существа> Анимации = новый();

	публичный недействительный начало действия()
    public static int MapWidth { get; internal set; }
    public static int MapHeight { get; internal set; }

    публичный недействительный начало действия()
	{
 Анимация.Очистить();
		< x; 0 = xvar ( для Game.MapWidth; x++)
		< y; 0 = yvar ( для Game.MapHeight; y++)
		{
			var существо = Game.Карта[x, y];
			если (существо == null) продолжить;
			var команда = существо.Действие(x, y);
			+ x( если команда.DeltaX < 0 || x + команда.DeltaX >= ширина карты.MapWidth || y + команда.DeltaY < 0 ||
			    y + команда.DeltaY >= Игра.КартаВысота)
				new throw Исключение($"Объект {существо.GetType()}выходит за пределы игрового поля");
 Анимация.Добавить(
				новая анимация создания
				{
					Команда = команда,
					Существо = существо,
					new = Location Точка(x * Размер элемента, y * Размер элемента),
					new = TargetLogicalLocation Точка(x + команда.DeltaX, y + команда.DeltaY)
				});
		}
		= Анимации Анимации.OrderByDescending(z => z.Creature.GetDrawingPriority()).ToList();
	}
	общедоступно недействительно Окончание действия()
	{
		= существаНаЛокацию var ПолучитьКандидатовНаЛокацию();
		< x; 0 = xvar ( для Game.MapWidth; x++)
		< y; 0 = yvar ( для Game.MapHeight; y++)
 Игра.Карта[x, y] = Выбрать победителя по местоположению( существа по местоположению, x, y);
	}
	статическое частное создание SelectWinnerCandidatePerLocation(Список<ICreature>[,] существ, int x, int y)
	{
		= кандидаты var существа[x, y];
		var aliveCandidates = кандидаты.ToList();
		вар (для каждого кандидата в кандидатах)
		вар (для каждого соперника в кандидатах)
			&& кандидат!= соперник ( если кандидат.DeadInConflict(соперник))
 Живы кандидаты.Удалить(кандидата);
		( есликандидат выживет.Количество > 1)
			новое привыбрасывании(
				$"Существа {aliveCandidates[0].GetType().Name} и {aliveCandidates[1].GetType().Name} претендуют на одну и ту же ячейку карты");
		вернуть живыми кандидатов.FirstOrDefault();
	}
	private Список<ICreature>[,] GetCandidatesPerLocation()
	{
		var creatures ICreature new List<ICreature>[Game.MapWidth, Game.MapHeight];
		for (var x = 0; x < Game.MapШирина; x++)
		< y; 0 = yvar ( для Game.MapHeight; y++)
 существа[x, y] = новый список<ICreature>();
		вар (для каждого e в анимации)
		{
			var x = (int) e.TargetLogicalLocation.X;
			) int ( =yvar e.TargetLogicalLocation.Y;
			= следующееСущество var e.Команда.Преобразовать в ?? e.Существо;
 существа[x, y].Добавить(следующее существо);
		}
		Возврат существа;
	}
}